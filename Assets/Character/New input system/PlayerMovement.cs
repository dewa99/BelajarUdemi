//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Character/New input system/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""369adab8-fb47-4244-b9d9-25c67371c38e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""479d48fb-5fb9-43f7-a3f1-2321b5c3070c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChopTree"",
                    ""type"": ""Value"",
                    ""id"": ""603e719f-f7f1-4bc2-b8e3-3649fd4610c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstAbilityUse"",
                    ""type"": ""Value"",
                    ""id"": ""b45e62fe-a39f-4bb6-aed1-4682b6cbc3fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondAbilityUse"",
                    ""type"": ""Value"",
                    ""id"": ""593c24ac-7c3b-4c50-8af8-386b561fc843"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThirdAbilityUse"",
                    ""type"": ""Value"",
                    ""id"": ""f6ef8825-e9c2-4901-b6fa-c00ee16d8887"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b6d392f9-ed27-4b81-b593-b29a2d7746c3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""12d18544-6d14-403a-8b4c-cf23112853e8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d356aed1-2b0d-48b1-b3b4-cb3caec6f226"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ffdeb78e-323f-4ffb-adc3-834582c787d8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""184360cc-4937-4db3-9254-465a547845ab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c320899e-7464-4519-9a63-5eac53743922"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18c73ff6-5ce7-4b91-89f7-cb2c74ea2e49"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChopTree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d44488af-415f-47a1-8ff3-a3b956a12175"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstAbilityUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99559aef-80d3-4a7a-80cf-d4f072237186"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondAbilityUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19bce9a7-9dd3-4a74-b72b-fcc7cc2a6326"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThirdAbilityUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
        m_Character_ChopTree = m_Character.FindAction("ChopTree", throwIfNotFound: true);
        m_Character_FirstAbilityUse = m_Character.FindAction("FirstAbilityUse", throwIfNotFound: true);
        m_Character_SecondAbilityUse = m_Character.FindAction("SecondAbilityUse", throwIfNotFound: true);
        m_Character_ThirdAbilityUse = m_Character.FindAction("ThirdAbilityUse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
    private readonly InputAction m_Character_Movement;
    private readonly InputAction m_Character_ChopTree;
    private readonly InputAction m_Character_FirstAbilityUse;
    private readonly InputAction m_Character_SecondAbilityUse;
    private readonly InputAction m_Character_ThirdAbilityUse;
    public struct CharacterActions
    {
        private @Player m_Wrapper;
        public CharacterActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Character_Movement;
        public InputAction @ChopTree => m_Wrapper.m_Character_ChopTree;
        public InputAction @FirstAbilityUse => m_Wrapper.m_Character_FirstAbilityUse;
        public InputAction @SecondAbilityUse => m_Wrapper.m_Character_SecondAbilityUse;
        public InputAction @ThirdAbilityUse => m_Wrapper.m_Character_ThirdAbilityUse;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @ChopTree.started += instance.OnChopTree;
            @ChopTree.performed += instance.OnChopTree;
            @ChopTree.canceled += instance.OnChopTree;
            @FirstAbilityUse.started += instance.OnFirstAbilityUse;
            @FirstAbilityUse.performed += instance.OnFirstAbilityUse;
            @FirstAbilityUse.canceled += instance.OnFirstAbilityUse;
            @SecondAbilityUse.started += instance.OnSecondAbilityUse;
            @SecondAbilityUse.performed += instance.OnSecondAbilityUse;
            @SecondAbilityUse.canceled += instance.OnSecondAbilityUse;
            @ThirdAbilityUse.started += instance.OnThirdAbilityUse;
            @ThirdAbilityUse.performed += instance.OnThirdAbilityUse;
            @ThirdAbilityUse.canceled += instance.OnThirdAbilityUse;
        }

        private void UnregisterCallbacks(ICharacterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @ChopTree.started -= instance.OnChopTree;
            @ChopTree.performed -= instance.OnChopTree;
            @ChopTree.canceled -= instance.OnChopTree;
            @FirstAbilityUse.started -= instance.OnFirstAbilityUse;
            @FirstAbilityUse.performed -= instance.OnFirstAbilityUse;
            @FirstAbilityUse.canceled -= instance.OnFirstAbilityUse;
            @SecondAbilityUse.started -= instance.OnSecondAbilityUse;
            @SecondAbilityUse.performed -= instance.OnSecondAbilityUse;
            @SecondAbilityUse.canceled -= instance.OnSecondAbilityUse;
            @ThirdAbilityUse.started -= instance.OnThirdAbilityUse;
            @ThirdAbilityUse.performed -= instance.OnThirdAbilityUse;
            @ThirdAbilityUse.canceled -= instance.OnThirdAbilityUse;
        }

        public void RemoveCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterActions @Character => new CharacterActions(this);
    public interface ICharacterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnChopTree(InputAction.CallbackContext context);
        void OnFirstAbilityUse(InputAction.CallbackContext context);
        void OnSecondAbilityUse(InputAction.CallbackContext context);
        void OnThirdAbilityUse(InputAction.CallbackContext context);
    }
}
